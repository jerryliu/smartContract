{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('web3-core-helpers'), require('web3-core-subscriptions'), require('web3-eth-accounts'), require('web3-eth-ens'), require('web3-eth-contract'), require('web3-eth-personal'), require('web3-eth-abi'), require('web3-eth-iban'), require('web3-providers'), require('web3-net'), require('web3-utils'), require('@babel/runtime/regenerator'), require('@babel/runtime/helpers/asyncToGenerator'), require('eth-lib/lib/nat'), require('eth-lib/lib/bytes'), require('eth-lib/lib/hash'), require('eth-lib/lib/rlp'), require('eth-lib/lib/account'), require('@babel/runtime/helpers/createClass'), require('@babel/runtime/helpers/set'), require('@babel/runtime/helpers/get'), require('web3-core'), require('@babel/runtime/helpers/classCallCheck'), require('@babel/runtime/helpers/possibleConstructorReturn'), require('@babel/runtime/helpers/getPrototypeOf'), require('@babel/runtime/helpers/inherits'), require('web3-core-method')) : typeof define === 'function' && define.amd ? define(['exports', 'web3-core-helpers', 'web3-core-subscriptions', 'web3-eth-accounts', 'web3-eth-ens', 'web3-eth-contract', 'web3-eth-personal', 'web3-eth-abi', 'web3-eth-iban', 'web3-providers', 'web3-net', 'web3-utils', '@babel/runtime/regenerator', '@babel/runtime/helpers/asyncToGenerator', 'eth-lib/lib/nat', 'eth-lib/lib/bytes', 'eth-lib/lib/hash', 'eth-lib/lib/rlp', 'eth-lib/lib/account', '@babel/runtime/helpers/createClass', '@babel/runtime/helpers/set', '@babel/runtime/helpers/get', 'web3-core', '@babel/runtime/helpers/classCallCheck', '@babel/runtime/helpers/possibleConstructorReturn', '@babel/runtime/helpers/getPrototypeOf', '@babel/runtime/helpers/inherits', 'web3-core-method'], factory) : factory(global.Web3Eth = {}, global.web3CoreHelpers, global.web3CoreSubscriptions, global.web3EthAccounts, global.web3EthEns, global.web3EthContract, global.web3EthPersonal, global.web3EthAbi, global.web3EthIban, global.web3Providers, global.web3Net, global.Utils, global._regeneratorRuntime, global._asyncToGenerator, global.Nat, global.Bytes, global.Hash, global.RLP, global.Account, global._createClass, global._set, global._get, global.web3Core, global._classCallCheck, global._possibleConstructorReturn, global._getPrototypeOf, global._inherits, global.web3CoreMethod);\n})(this, function (exports, web3CoreHelpers, web3CoreSubscriptions, web3EthAccounts, web3EthEns, web3EthContract, web3EthPersonal, web3EthAbi, web3EthIban, web3Providers, web3Net, Utils, _regeneratorRuntime, _asyncToGenerator, Nat, Bytes, Hash, RLP, Account, _createClass, _set, _get, web3Core, _classCallCheck, _possibleConstructorReturn, _getPrototypeOf, _inherits, web3CoreMethod) {\n  'use strict';\n\n  _regeneratorRuntime = _regeneratorRuntime && _regeneratorRuntime.hasOwnProperty('default') ? _regeneratorRuntime['default'] : _regeneratorRuntime;\n  _asyncToGenerator = _asyncToGenerator && _asyncToGenerator.hasOwnProperty('default') ? _asyncToGenerator['default'] : _asyncToGenerator;\n  Nat = Nat && Nat.hasOwnProperty('default') ? Nat['default'] : Nat;\n  Bytes = Bytes && Bytes.hasOwnProperty('default') ? Bytes['default'] : Bytes;\n  Hash = Hash && Hash.hasOwnProperty('default') ? Hash['default'] : Hash;\n  RLP = RLP && RLP.hasOwnProperty('default') ? RLP['default'] : RLP;\n  Account = Account && Account.hasOwnProperty('default') ? Account['default'] : Account;\n  _createClass = _createClass && _createClass.hasOwnProperty('default') ? _createClass['default'] : _createClass;\n  _set = _set && _set.hasOwnProperty('default') ? _set['default'] : _set;\n  _get = _get && _get.hasOwnProperty('default') ? _get['default'] : _get;\n  _classCallCheck = _classCallCheck && _classCallCheck.hasOwnProperty('default') ? _classCallCheck['default'] : _classCallCheck;\n  _possibleConstructorReturn = _possibleConstructorReturn && _possibleConstructorReturn.hasOwnProperty('default') ? _possibleConstructorReturn['default'] : _possibleConstructorReturn;\n  _getPrototypeOf = _getPrototypeOf && _getPrototypeOf.hasOwnProperty('default') ? _getPrototypeOf['default'] : _getPrototypeOf;\n  _inherits = _inherits && _inherits.hasOwnProperty('default') ? _inherits['default'] : _inherits;\n\n  var TransactionSigner = function () {\n    function TransactionSigner(utils, formatters) {\n      _classCallCheck(this, TransactionSigner);\n\n      this.utils = utils;\n      this.formatters = formatters;\n    }\n\n    _createClass(TransactionSigner, [{\n      key: \"sign\",\n      value: function () {\n        var _sign = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(transaction, privateKey) {\n          var rlpEncoded, hash, signature, rawTransaction, values;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (privateKey) {\n                    _context.next = 2;\n                    break;\n                  }\n\n                  throw new Error('No privateKey given to the TransactionSigner.');\n\n                case 2:\n                  if (privateKey.startsWith('0x')) {\n                    privateKey = privateKey.substring(2);\n                  }\n\n                  transaction = this.formatters.txInputFormatter(transaction);\n                  transaction.to = transaction.to || '0x';\n                  transaction.data = transaction.data || '0x';\n                  transaction.value = transaction.value || '0x';\n                  transaction.chainId = this.utils.numberToHex(transaction.chainId);\n                  rlpEncoded = this.createRlpEncodedTransaction(transaction);\n                  hash = Hash.keccak256(rlpEncoded);\n                  signature = this.createAccountSignature(hash, privateKey, transaction.chainId);\n                  rawTransaction = RLP.encode(this.mapRlpEncodedTransaction(rlpEncoded, signature));\n                  values = RLP.decode(rawTransaction);\n                  return _context.abrupt(\"return\", {\n                    messageHash: hash,\n                    v: this.trimLeadingZero(values[6]),\n                    r: this.trimLeadingZero(values[7]),\n                    s: this.trimLeadingZero(values[8]),\n                    rawTransaction: rawTransaction\n                  });\n\n                case 14:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        return function sign(_x, _x2) {\n          return _sign.apply(this, arguments);\n        };\n      }()\n    }, {\n      key: \"createRlpEncodedTransaction\",\n      value: function createRlpEncodedTransaction(transaction) {\n        return RLP.encode([Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.to.toLowerCase(), Bytes.fromNat(transaction.value), transaction.data, Bytes.fromNat(transaction.chainId), '0x', '0x']);\n      }\n    }, {\n      key: \"createAccountSignature\",\n      value: function createAccountSignature(hash, privateKey, chainId) {\n        return Account.makeSigner(Nat.toNumber(chainId) * 2 + 35)(hash, privateKey);\n      }\n    }, {\n      key: \"mapRlpEncodedTransaction\",\n      value: function mapRlpEncodedTransaction(rlpEncoded, signature) {\n        var rawTransaction = RLP.decode(rlpEncoded).slice(0, 6).concat(Account.decodeSignature(signature));\n        rawTransaction[6] = this.makeEven(this.trimLeadingZero(rawTransaction[6]));\n        rawTransaction[7] = this.makeEven(this.trimLeadingZero(rawTransaction[7]));\n        rawTransaction[8] = this.makeEven(this.trimLeadingZero(rawTransaction[8]));\n        return rawTransaction;\n      }\n    }, {\n      key: \"trimLeadingZero\",\n      value: function trimLeadingZero(hex) {\n        while (hex && hex.startsWith('0x0')) {\n          hex = \"0x\".concat(hex.slice(3));\n        }\n\n        return hex;\n      }\n    }, {\n      key: \"makeEven\",\n      value: function makeEven(hex) {\n        if (hex.length % 2 === 1) {\n          hex = hex.replace('0x', '0x0');\n        }\n\n        return hex;\n      }\n    }]);\n\n    return TransactionSigner;\n  }();\n\n  var Eth = function (_AbstractWeb3Module) {\n    _inherits(Eth, _AbstractWeb3Module);\n\n    function Eth(provider, providersModuleFactory, methodModuleFactory, methodFactory, net, accounts, personal, Iban, abiCoder, ens, utils, formatters, subscriptionsFactory, contractModuleFactory, transactionSigner, options, nodeNet) {\n      var _this;\n\n      _classCallCheck(this, Eth);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Eth).call(this, provider, providersModuleFactory, methodModuleFactory, methodFactory, options, nodeNet));\n      _this.net = net;\n      _this.accounts = accounts;\n      _this.personal = personal;\n      _this.Iban = Iban;\n      _this.abi = abiCoder;\n      _this.ens = ens;\n      _this.utils = utils;\n      _this.formatters = formatters;\n      _this.subscriptionsFactory = subscriptionsFactory;\n      _this.contractModuleFactory = contractModuleFactory;\n      _this.initiatedContracts = [];\n      _this._transactionSigner = options.transactionSigner || transactionSigner;\n\n      _this.Contract = function (abi, address) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        options.transactionSigner = _this.transactionSigner;\n\n        var contract = _this.contractModuleFactory.createContract(_this.currentProvider, _this.providersModuleFactory, _this.accounts, abi, address, options);\n\n        _this.initiatedContracts.push(contract);\n\n        return contract;\n      };\n\n      return _this;\n    }\n\n    _createClass(Eth, [{\n      key: \"clearSubscriptions\",\n      value: function clearSubscriptions() {\n        return _get(_getPrototypeOf(Eth.prototype), \"clearSubscriptions\", this).call(this, 'eth_unsubscribe');\n      }\n    }, {\n      key: \"subscribe\",\n      value: function subscribe(type, options, callback) {\n        switch (type) {\n          case 'logs':\n            return this.subscriptionsFactory.createLogSubscription(options, this, this.methodFactory.createMethod('getPastLogs')).subscribe(callback);\n\n          case 'newBlockHeaders':\n            return this.subscriptionsFactory.createNewHeadsSubscription(this).subscribe(callback);\n\n          case 'pendingTransactions':\n            return this.subscriptionsFactory.createNewPendingTransactionsSubscription(this).subscribe(callback);\n\n          case 'syncing':\n            return this.subscriptionsFactory.createSyncingSubscription(this).subscribe(callback);\n\n          default:\n            throw new Error(\"Unknown subscription: \".concat(type));\n        }\n      }\n    }, {\n      key: \"setProvider\",\n      value: function setProvider(provider, net) {\n        var setContractProviders = this.initiatedContracts.every(function (contract) {\n          return contract.setProvider(provider, net);\n        });\n        return this.net.setProvider(provider, net) && this.personal.setProvider(provider, net) && _get(_getPrototypeOf(Eth.prototype), \"setProvider\", this).call(this, provider, net) && setContractProviders;\n      }\n    }, {\n      key: \"transactionSigner\",\n      get: function get() {\n        return this._transactionSigner;\n      },\n      set: function set(transactionSigner) {\n        this._transactionSigner = transactionSigner;\n        this.accounts.transactionSigner = transactionSigner;\n        this.ens.transactionSigner = transactionSigner;\n        this.initiatedContracts.forEach(function (contract) {\n          contract.transactionSigner = transactionSigner;\n        });\n      }\n    }, {\n      key: \"defaultGasPrice\",\n      set: function set(value) {\n        this.initiatedContracts.forEach(function (contract) {\n          contract.defaultGasPrice = value;\n        });\n        this.net.defaultGasPrice = value;\n        this.personal.defaultGasPrice = value;\n\n        _set(_getPrototypeOf(Eth.prototype), \"defaultGasPrice\", value, this, true);\n      },\n      get: function get() {\n        return _get(_getPrototypeOf(Eth.prototype), \"defaultGasPrice\", this);\n      }\n    }, {\n      key: \"defaultGas\",\n      set: function set(value) {\n        this.initiatedContracts.forEach(function (contract) {\n          contract.defaultGas = value;\n        });\n        this.net.defaultGas = value;\n        this.personal.defaultGas = value;\n\n        _set(_getPrototypeOf(Eth.prototype), \"defaultGas\", value, this, true);\n      },\n      get: function get() {\n        return _get(_getPrototypeOf(Eth.prototype), \"defaultGas\", this);\n      }\n    }, {\n      key: \"transactionBlockTimeout\",\n      set: function set(value) {\n        this.initiatedContracts.forEach(function (contract) {\n          contract.transactionBlockTimeout = value;\n        });\n        this.net.transactionBlockTimeout = value;\n        this.personal.transactionBlockTimeout = value;\n\n        _set(_getPrototypeOf(Eth.prototype), \"transactionBlockTimeout\", value, this, true);\n      },\n      get: function get() {\n        return _get(_getPrototypeOf(Eth.prototype), \"transactionBlockTimeout\", this);\n      }\n    }, {\n      key: \"transactionConfirmationBlocks\",\n      set: function set(value) {\n        this.initiatedContracts.forEach(function (contract) {\n          contract.transactionConfirmationBlocks = value;\n        });\n        this.net.transactionConfirmationBlocks = value;\n        this.personal.transactionConfirmationBlocks = value;\n\n        _set(_getPrototypeOf(Eth.prototype), \"transactionConfirmationBlocks\", value, this, true);\n      },\n      get: function get() {\n        return _get(_getPrototypeOf(Eth.prototype), \"transactionConfirmationBlocks\", this);\n      }\n    }, {\n      key: \"transactionPollingTimeout\",\n      set: function set(value) {\n        this.initiatedContracts.forEach(function (contract) {\n          contract.transactionPollingTimeout = value;\n        });\n        this.net.transactionPollingTimeout = value;\n        this.personal.transactionPollingTimeout = value;\n\n        _set(_getPrototypeOf(Eth.prototype), \"transactionPollingTimeout\", value, this, true);\n      },\n      get: function get() {\n        return _get(_getPrototypeOf(Eth.prototype), \"transactionPollingTimeout\", this);\n      }\n    }, {\n      key: \"defaultAccount\",\n      set: function set(value) {\n        var _this2 = this;\n\n        this.initiatedContracts.forEach(function (contract) {\n          contract.defaultAccount = _this2.utils.toChecksumAddress(value);\n        });\n        this.net.defaultAccount = value;\n        this.personal.defaultAccount = value;\n\n        _set(_getPrototypeOf(Eth.prototype), \"defaultAccount\", value, this, true);\n      },\n      get: function get() {\n        return _get(_getPrototypeOf(Eth.prototype), \"defaultAccount\", this);\n      }\n    }, {\n      key: \"defaultBlock\",\n      set: function set(value) {\n        this.initiatedContracts.forEach(function (contract) {\n          contract.defaultBlock = value;\n        });\n        this.net.defaultBlock = value;\n        this.personal.defaultBlock = value;\n\n        _set(_getPrototypeOf(Eth.prototype), \"defaultBlock\", value, this, true);\n      },\n      get: function get() {\n        return _get(_getPrototypeOf(Eth.prototype), \"defaultBlock\", this);\n      }\n    }]);\n\n    return Eth;\n  }(web3Core.AbstractWeb3Module);\n\n  var MethodFactory = function (_AbstractMethodFactor) {\n    _inherits(MethodFactory, _AbstractMethodFactor);\n\n    function MethodFactory(methodModuleFactory, utils, formatters) {\n      var _this;\n\n      _classCallCheck(this, MethodFactory);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(MethodFactory).call(this, methodModuleFactory, utils, formatters));\n      _this.methods = {\n        getNodeInfo: web3CoreMethod.GetNodeInfoMethod,\n        getProtocolVersion: web3CoreMethod.GetProtocolVersionMethod,\n        getCoinbase: web3CoreMethod.GetCoinbaseMethod,\n        isMining: web3CoreMethod.IsMiningMethod,\n        getHashrate: web3CoreMethod.GetHashrateMethod,\n        isSyncing: web3CoreMethod.IsSyncingMethod,\n        getGasPrice: web3CoreMethod.GetGasPriceMethod,\n        getAccounts: web3CoreMethod.GetAccountsMethod,\n        getBlockNumber: web3CoreMethod.GetBlockNumberMethod,\n        getBalance: web3CoreMethod.GetBalanceMethod,\n        getStorageAt: web3CoreMethod.GetStorageAtMethod,\n        getCode: web3CoreMethod.GetCodeMethod,\n        getBlock: web3CoreMethod.GetBlockMethod,\n        getUncle: web3CoreMethod.GetUncleMethod,\n        getBlockTransactionCount: web3CoreMethod.GetBlockTransactionCountMethod,\n        getBlockUncleCount: web3CoreMethod.GetBlockUncleCountMethod,\n        getTransaction: web3CoreMethod.GetTransactionMethod,\n        getTransactionFromBlock: web3CoreMethod.GetTransactionFromBlockMethod,\n        getTransactionReceipt: web3CoreMethod.GetTransactionReceipt,\n        getTransactionCount: web3CoreMethod.GetTransactionCountMethod,\n        sendSignedTransaction: web3CoreMethod.SendRawTransactionMethod,\n        signTransaction: web3CoreMethod.SignTransactionMethod,\n        sendTransaction: web3CoreMethod.SendTransactionMethod,\n        sign: web3CoreMethod.SignMethod,\n        call: web3CoreMethod.CallMethod,\n        estimateGas: web3CoreMethod.EstimateGasMethod,\n        submitWork: web3CoreMethod.SubmitWorkMethod,\n        getWork: web3CoreMethod.GetWorkMethod,\n        getPastLogs: web3CoreMethod.GetPastLogsMethod,\n        requestAccounts: web3CoreMethod.RequestAccountsMethod,\n        getId: web3CoreMethod.VersionMethod,\n        getChainId: web3CoreMethod.ChainIdMethod\n      };\n      return _this;\n    }\n\n    return MethodFactory;\n  }(web3CoreMethod.AbstractMethodFactory);\n\n  var TransactionSigner$1 = function TransactionSigner$$1() {\n    return new TransactionSigner(Utils, web3CoreHelpers.formatters);\n  };\n\n  var MethodFactory$1 = function MethodFactory$$1() {\n    return new MethodFactory(new web3CoreMethod.MethodModuleFactory(), Utils, web3CoreHelpers.formatters);\n  };\n\n  var Eth$1 = function Eth$$1(provider, net, options) {\n    var accounts = new web3EthAccounts.Accounts(provider, options);\n    var abiCoder = new web3EthAbi.AbiCoder();\n    var methodModuleFactory = new web3CoreMethod.MethodModuleFactory();\n    return new Eth(provider, new web3Providers.ProvidersModuleFactory(), methodModuleFactory, new MethodFactory$1(), new web3Net.Network(provider, options), accounts, new web3EthPersonal.Personal(provider, accounts, options), web3EthIban.Iban, abiCoder, new web3EthEns.Ens(provider, accounts, options), Utils, web3CoreHelpers.formatters, new web3CoreSubscriptions.SubscriptionsFactory(), new web3EthContract.ContractModuleFactory(Utils, web3CoreHelpers.formatters, abiCoder, accounts, methodModuleFactory), new TransactionSigner$1(), options, net);\n  };\n\n  exports.TransactionSigner = TransactionSigner$1;\n  exports.MethodFactory = MethodFactory$1;\n  exports.Eth = Eth$1;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}